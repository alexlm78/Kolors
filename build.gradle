import com.diffplug.spotless.extra.wtp.EclipseWtpFormatterStep

plugins {
   id 'java'
   id 'org.springframework.boot' version '3.5.6'
   id 'io.spring.dependency-management' version '1.1.7'
   id 'com.diffplug.spotless' version '6.22.0'
}

group = 'dev.kreaker.kolors'
version = '0.6.4'

java {
   sourceCompatibility = JavaVersion.VERSION_21

   toolchain {
      languageVersion = JavaLanguageVersion.of(21)
   }
}

repositories {
   mavenCentral()
}

dependencies {
   implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
   implementation 'org.springframework.boot:spring-boot-starter-web'
   implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
   implementation 'org.springframework.boot:spring-boot-starter-validation'
   implementation 'org.springframework.boot:spring-boot-starter-aop'
   implementation 'org.xerial:sqlite-jdbc:3.44.1.0'
   implementation 'org.hibernate.orm:hibernate-community-dialects:6.4.4.Final'

   runtimeOnly 'com.h2database:h2'

   testImplementation 'org.springframework.boot:spring-boot-starter-test'
   testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
   java {
      target '**/*.java'
      targetExclude '**/build/**', '**/.gradle/**', 'out/**'

      googleJavaFormat('1.17.0').aosp()
      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(3)

      custom 'noWildcardImports', {
         if (it.contains('import .*\\*')) {
            throw new RuntimeException('No use wildcard imports')
         }
      } as Closure<String>

      custom 'enforceUtf8', {
         return new String(it.getBytes('UTF-8'), 'UTF-8')
      }
   }

   format 'properties', {
      target '**/*.properties'
      targetExclude '**/build/**', '**/.gradle/**', 'out/**'

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)

      // Sort properties alphabetically
      custom 'sortProperties', { content ->
         def lines = content.readLines()
         def result = []
         def commentBlock = []
         def propBlock = []

         lines.each { line ->
            def trimmed = line.trim()
            if (trimmed.startsWith('#') || trimmed.isEmpty()) {
               if (!propBlock.isEmpty()) {
                  result.addAll(propBlock.sort { a, b ->
                     def keyA = a.tokenize('=')?.getAt(0)?.trim() ?: a.trim()
                     def keyB = b.tokenize('=')?.getAt(0)?.trim() ?: b.trim()
                     return keyA.compareToIgnoreCase(keyB)
                  })
                  propBlock.clear()
               }
               result.add(line)
            } else {
               propBlock.add(line)
            }
         }

         if (!propBlock.isEmpty()) {
            result.addAll(propBlock.sort { a, b ->
               def keyA = a.tokenize('=')?.getAt(0)?.trim() ?: a.trim()
               def keyB = b.tokenize('=')?.getAt(0)?.trim() ?: b.trim()
               return keyA.compareToIgnoreCase(keyB)
            })
         }

         return result.join('\n')
      }
   }

   // YAML files (Spring Boot configs)
   format 'yaml', {
      target '**/*.yml', '**/*.yaml'
      targetExclude '**/build/**'

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
   }

   // XML files (Maven, Spring configs)
   format 'xml', {
      target '**/*.xml'
      targetExclude '**/build/**'

      eclipseWtp(EclipseWtpFormatterStep.XML)
      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
   }

   // Additional formats
   format 'misc', {
      target '**/*.md', '**/*.gitignore'
      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(3)
   }
}

// Custom tasks for IDE integration
tasks.register('formatJava', Exec) {
   group 'formatting'
   description 'Format only Java files'
   doLast {
      commandLine './gradlew', 'spotlessJavaApply'
   }
}

tasks.register('formatProperties', Exec) {
   group 'formatting'
   description 'Format only Properties files'
   doLast {
      commandLine './gradlew', 'spotlessPropertiesApply'
   }
}

tasks.register('formatAll') {
   group 'formatting'
   description 'Format all supported files'
   dependsOn 'spotlessApply'
}
